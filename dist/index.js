import{execa as h}from"execa";import m from"fs/promises";import r from"path";var e=new Map,c=n=>m.stat(n).then(()=>!0,()=>!1);function l(n){let a=`has_global_${n}`;return e.has(a)?Promise.resolve(e.get(a)):h(n,["--version"]).then(o=>/^\d+.\d+.\d+$/.test(o.stdout)).then(o=>(e.set(a,o),o)).catch(()=>!1)}async function f(n){let a=["yarn","npm","bun"];return(await Promise.all(a.map(async t=>{let s=t==="npm"?"package-lock.json":`${t}.lock${t==="bun"?"b":""}`,p=await c(r.join(n,s)),u=await l(t);return{name:t,hasLock:p,hasGlobal:u}}))).filter(t=>t.hasLock||t.hasGlobal)}async function i(n=process.cwd()){return await c(r.join(n,"pnpm-lock.yaml"))?{canPnpm:!0,reason:"local lock file"}:await l("pnpm")?{canPnpm:!0,reason:"global installation"}:{canPnpm:!1,otherManagers:(await f(n)).map(s=>({name:s.name,detected:s.hasLock?"local lock file":"global installation"}))}}var d=i;(async()=>{try{let n=await i();console.log(n)}catch(n){console.error("Error:",n)}})();export{d as default};
//# sourceMappingURL=index.js.map